# Custom Document Signing System Implementation Plan

## Overview
Replace DocuSeal integration with a custom, self-hosted document signing solution that provides:
- PDF document upload and storage
- Electronic signature collection
- Email notifications
- Secure document access
- Audit trail and compliance
- Encryption at rest and in transit so the database admin cannot read the documents

## Phase 1: Core Infrastructure Setup

### 1.1 Database Schema Design
- [ ] Design Firestore collections:
  - `documents` - Store document metadata
  - `signatures` - Store signature data and positions
  - `signing_sessions` - Track signing workflows
  - `audit_logs` - Compliance and tracking
  - `email_templates` - Customizable email notifications

### 1.2 File Storage Setup
- [ ] Configure Firebase Storage rules for document security
- [ ] Create storage buckets:
  - `documents/original/` - Original uploaded PDFs
  - `documents/signed/` - Final signed documents
  - `signatures/` - Signature images/data
- [ ] Implement file upload security (virus scanning, size limits)

### 1.3 Security & Authentication
- [ ] Update Firebase Security Rules for new collections
- [ ] Implement document access control (owner + signers only)
- [ ] Create secure token system for unauthenticated signing
- [ ] Add rate limiting for API endpoints

## Phase 2: Backend Functions Development

### 2.1 Document Management Functions
- [ ] `uploadDocument` - Handle PDF upload and validation
- [ ] `createSigningSession` - Initialize signing workflow
- [ ] `getDocument` - Secure document retrieval
- [ ] `deleteDocument` - Document cleanup with permissions
- [ ] `duplicateDocument` - Template reuse functionality

### 2.2 Signature Functions
- [ ] `addSignature` - Store signature data and position
- [ ] `validateSignature` - Verify signature authenticity
- [ ] `generateSignedPDF` - Merge signatures into final PDF
- [ ] `getSigningStatus` - Track completion progress

### 2.3 Email & Notification Functions
- [ ] `sendSigningInvitation` - Email with secure signing links
- [ ] `sendSigningReminder` - Automated follow-up emails
- [ ] `notifyCompletion` - Notify all parties when complete
- [ ] `sendStatusUpdate` - Progress notifications

### 2.3.1 Gmail API Implementation (Selected Option)
- [ ] Set up Gmail API credentials in Google Cloud Console
- [ ] Configure OAuth2 for sending emails from RBS business account
- [ ] Implement Gmail API in Firebase Functions
- [ ] Benefits: 
  - Uses existing business Gmail account
  - High deliverability rates
  - Free for reasonable volume
  - Integrated with Google Workspace

#### Gmail API Setup Steps

##### Step 1: Google Cloud Console Configuration
- [ ] Go to Google Cloud Console (console.cloud.google.com)
- [ ] Select your Firebase project (red-box-software)
- [ ] Enable Gmail API:
  - [ ] Navigate to "APIs & Services" > "Library"
  - [ ] Search for "Gmail API" and click "Enable"
- [ ] Create service account credentials:
  - [ ] Go to "APIs & Services" > "Credentials"
  - [ ] Click "Create Credentials" > "Service Account"
  - [ ] Name: "gmail-service-account"
  - [ ] Description: "Service account for sending emails via Gmail API"
  - [ ] Create and download JSON key file

##### Step 2: Gmail Account Configuration
- [ ] Set up domain-wide delegation for service account:
  - [ ] Go to Google Admin Console (admin.google.com)
  - [ ] Navigate to Security > API Controls > Domain-wide Delegation
  - [ ] Add service account client ID with Gmail API scope:
    - Scope: https://www.googleapis.com/auth/gmail.send
- [ ] Configure email account for sending:
  - [ ] Use existing RBS business Gmail account
  - [ ] Or create dedicated account: documents@redboxsoftware.com

##### Step 3: Firebase Functions Setup
- [ ] Install required dependencies in functions/:
  ```bash
  npm install googleapis@latest
  npm install nodemailer@latest (backup option)
  ```
- [ ] Store service account key securely:
  - [ ] Upload JSON key to Firebase Functions config
  - [ ] Or use Firebase Secret Manager for better security
- [ ] Configure environment variables:
  - [ ] GMAIL_SERVICE_ACCOUNT_EMAIL=your-service-account@project.iam.gserviceaccount.com
  - [ ] GMAIL_IMPERSONATION_EMAIL=documents@redboxsoftware.com

##### Step 4: Implementation Code Structure
- [ ] Create email service module: `functions/services/emailService.js`
- [ ] Implement Gmail API wrapper functions
- [ ] Create email template system
- [ ] Add error handling and retry logic
- [ ] Implement email tracking and logging

#### Gmail API Code Implementation

##### Email Service Module (`functions/services/emailService.js`)
```javascript
const { google } = require('googleapis');
const functions = require('firebase-functions');
const admin = require('firebase-admin');

class EmailService {
  constructor() {
    this.gmail = null;
    this.auth = null;
    this.initialized = false;
  }

  async initialize() {
    if (this.initialized) return;

    try {
      // Load service account credentials
      const serviceAccountKey = functions.config().gmail?.service_account_key;
      const impersonationEmail = functions.config().gmail?.impersonation_email;

      if (!serviceAccountKey || !impersonationEmail) {
        throw new Error('Gmail API credentials not configured');
      }

      // Create JWT client for domain-wide delegation
      this.auth = new google.auth.JWT(
        serviceAccountKey.client_email,
        null,
        serviceAccountKey.private_key,
        ['https://www.googleapis.com/auth/gmail.send'],
        impersonationEmail // Impersonate this email account
      );

      await this.auth.authorize();
      
      this.gmail = google.gmail({ version: 'v1', auth: this.auth });
      this.initialized = true;
      
      console.log('Gmail API initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Gmail API:', error);
      throw error;
    }
  }

  async sendEmail({ to, subject, html, attachments = [] }) {
    await this.initialize();

    try {
      // Create email message
      const message = this.createEmailMessage({
        to,
        subject,
        html,
        attachments
      });

      // Send email
      const result = await this.gmail.users.messages.send({
        userId: 'me',
        requestBody: {
          raw: message
        }
      });

      // Log email sent
      await this.logEmailSent({
        to,
        subject,
        messageId: result.data.id,
        timestamp: new Date()
      });

      return {
        success: true,
        messageId: result.data.id
      };
    } catch (error) {
      console.error('Failed to send email:', error);
      
      // Log email error
      await this.logEmailError({
        to,
        subject,
        error: error.message,
        timestamp: new Date()
      });

      throw error;
    }
  }

  createEmailMessage({ to, subject, html, attachments }) {
    const boundary = 'boundary_' + Date.now();
    
    let message = [
      'MIME-Version: 1.0',
      `To: ${to}`,
      `Subject: ${subject}`,
      'Content-Type: multipart/mixed; boundary="' + boundary + '"',
      '',
      '--' + boundary,
      'Content-Type: text/html; charset="UTF-8"',
      'Content-Transfer-Encoding: 7bit',
      '',
      html,
      ''
    ];

    // Add attachments if any
    attachments.forEach(attachment => {
      message.push('--' + boundary);
      message.push(`Content-Type: ${attachment.mimeType}`);
      message.push('Content-Transfer-Encoding: base64');
      message.push(`Content-Disposition: attachment; filename="${attachment.filename}"`);
      message.push('');
      message.push(attachment.content);
      message.push('');
    });

    message.push('--' + boundary + '--');

    return Buffer.from(message.join('\n')).toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
  }

  async logEmailSent({ to, subject, messageId, timestamp }) {
    await admin.firestore().collection('email_logs').add({
      to,
      subject,
      messageId,
      status: 'sent',
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      provider: 'gmail'
    });
  }

  async logEmailError({ to, subject, error, timestamp }) {
    await admin.firestore().collection('email_logs').add({
      to,
      subject,
      error,
      status: 'failed',
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      provider: 'gmail'
    });
  }
}

module.exports = new EmailService();
```

##### Email Template System
- [ ] Create template functions for different email types:
  - [ ] `generateSigningInvitationHTML()`
  - [ ] `generateSigningReminderHTML()`
  - [ ] `generateCompletionNotificationHTML()`
  - [ ] `generateStatusUpdateHTML()`

##### Firebase Functions Integration
- [ ] Update existing functions to use new email service:
  - [ ] Modify `createSigningSession` to send invitations
  - [ ] Create `sendSigningReminder` function
  - [ ] Create `notifyDocumentCompletion` function

#### Email Security & Compliance
- [ ] SPF Record Setup:
  - [ ] Add to DNS: `v=spf1 include:_spf.google.com ~all`
- [ ] DKIM Configuration:
  - [ ] Enable in Gmail Admin Console
  - [ ] Verify domain ownership
- [ ] DMARC Policy:
  - [ ] Add DNS record for email authentication
- [ ] Rate Limiting:
  - [ ] Implement sending limits (100 emails/minute)
  - [ ] Queue system for bulk emails

#### Testing & Monitoring
- [ ] Test email delivery with different providers
- [ ] Monitor delivery rates and bounce rates
- [ ] Set up alerts for email failures
- [ ] Create dashboard for email analytics

#### Backup Email Options
- [ ] Implement fallback to Nodemailer + SMTP if Gmail API fails
- [ ] Configure SendGrid as secondary option
- [ ] Create email queue system for reliability

### 2.4 PDF Processing Functions
- [ ] `extractPDFMetadata` - Get document info (pages, size, etc.)
- [ ] `addSignatureFields` - Overlay signature areas on PDF
- [ ] `mergePDFSignatures` - Combine signatures with document
- [ ] `generateThumbnails` - Preview images for UI

## Phase 3: Frontend Components Development

### 3.1 Document Upload Interface
- [ ] Enhanced drag-and-drop with preview
- [ ] PDF validation and error handling
- [ ] Progress indicators for large files
- [ ] Thumbnail generation and display

### 3.2 Signature Collection Interface
- [ ] Canvas-based signature drawing
- [ ] Signature pad with touch support
- [ ] Typed signature options
- [ ] Upload signature image option
- [ ] Signature positioning on PDF pages

### 3.3 Document Viewer
- [ ] PDF.js integration for document rendering
- [ ] Signature field overlay system
- [ ] Mobile-responsive PDF viewer
- [ ] Zoom and navigation controls
- [ ] Page-by-page signature flow

### 3.4 Signing Workflow UI
- [ ] Step-by-step signing wizard
- [ ] Progress tracking (who signed, who's pending)
- [ ] Signer information management
- [ ] Email customization interface
- [ ] Signing order configuration

## Phase 4: Advanced Features

### 4.1 Document Templates
- [ ] Create reusable document templates
- [ ] Template library management
- [ ] Field positioning templates
- [ ] Template sharing between users

### 4.2 Advanced Signature Types
- [ ] Digital certificate integration
- [ ] Biometric signature verification
- [ ] Multi-factor authentication for signing
- [ ] Corporate signature delegation

### 4.3 Compliance & Legal Features
- [ ] Audit trail generation
- [ ] Legal compliance reports
- [ ] Document retention policies
- [ ] ESIGN Act compliance
- [ ] International signature law support

### 4.4 Integration Features
- [ ] API for third-party integrations
- [ ] Webhook notifications
- [ ] Bulk document processing
- [ ] Calendar integration for signing deadlines

## Phase 5: UI/UX Enhancements

### 5.1 Dashboard Improvements
- [ ] Advanced filtering and search
- [ ] Bulk operations (delete, resend, etc.)
- [ ] Analytics and usage statistics
- [ ] Export capabilities (CSV, PDF reports)

### 5.2 Mobile Optimization
- [ ] Progressive Web App (PWA) features
- [ ] Offline signature capability
- [ ] Mobile signature optimization
- [ ] Touch-friendly interface improvements

### 5.3 Accessibility
- [ ] Screen reader compatibility
- [ ] Keyboard navigation support
- [ ] High contrast mode
- [ ] Text size adjustments

## Phase 6: Testing & Deployment

### 6.1 Testing Strategy
- [ ] Unit tests for all Firebase Functions
- [ ] Integration tests for signing workflows
- [ ] End-to-end testing with real PDFs
- [ ] Security penetration testing
- [ ] Load testing for scalability

### 6.2 Performance Optimization
- [ ] PDF processing optimization
- [ ] Image compression for signatures
- [ ] Caching strategies
- [ ] CDN setup for static assets

### 6.3 Monitoring & Analytics
- [ ] Error tracking and logging
- [ ] Performance monitoring
- [ ] User behavior analytics
- [ ] Security event monitoring

## Technical Implementation Details

### Required Dependencies
- [ ] PDF-lib - PDF manipulation and generation
- [ ] PDF.js - Frontend PDF rendering
- [ ] Signature_pad - Canvas signature collection
- [ ] Sharp - Image processing and optimization
- [ ] Nodemailer - Email sending (alternative to SendGrid)

### File Structure Changes
```
public/
├── document-signing.html (update for custom system)
├── signature-pad/
│   ├── signature-collection.html
│   └── signature-viewer.html
└── pdf-viewer/
    ├── pdf-renderer.js
    └── signature-overlay.js

functions/
├── document-management/
│   ├── upload.js
│   ├── storage.js
│   └── metadata.js
├── signature-processing/
│   ├── collection.js
│   ├── validation.js
│   └── pdf-merge.js
├── email-notifications/
│   ├── templates.js
│   ├── sending.js
│   └── tracking.js
└── utils/
    ├── pdf-utils.js
    ├── security.js
    └── validation.js
```

### Database Schema
```javascript
// documents collection
{
  id: "doc_123",
  title: "Employment Contract",
  originalUrl: "gs://bucket/documents/original/doc_123.pdf",
  signedUrl: "gs://bucket/documents/signed/doc_123_signed.pdf",
  createdBy: "user_456",
  createdAt: timestamp,
  status: "pending|completed|expired",
  signers: [
    {
      email: "signer@example.com",
      name: "John Doe",
      status: "pending|signed",
      signedAt: timestamp,
      signatureId: "sig_789"
    }
  ],
  metadata: {
    pageCount: 3,
    fileSize: 1024000,
    thumbnails: ["thumb1.jpg", "thumb2.jpg"]
  }
}

// signatures collection
{
  id: "sig_789",
  documentId: "doc_123",
  signerEmail: "signer@example.com",
  signatureData: "base64_signature_image",
  position: {
    page: 1,
    x: 100,
    y: 200,
    width: 150,
    height: 50
  },
  timestamp: timestamp,
  ipAddress: "192.168.1.1",
  userAgent: "browser_info"
}
```

## Migration Plan from DocuSeal

### Phase 1: Parallel Implementation
- [ ] Build custom system alongside existing DocuSeal integration
- [ ] Add feature flag to toggle between systems
- [ ] Test with limited user group

### Phase 2: Data Migration
- [ ] Export existing documents from DocuSeal (if possible)
- [ ] Migrate user preferences and settings
- [ ] Update existing document links

### Phase 3: Complete Transition
- [ ] Remove DocuSeal dependencies
- [ ] Update all UI references
- [ ] Clean up obsolete code and functions

## Estimated Timeline
- Phase 1-2: 2-3 weeks (Core infrastructure & backend)
- Phase 3: 2-3 weeks (Frontend components)
- Phase 4: 3-4 weeks (Advanced features)
- Phase 5-6: 1-2 weeks (Polish & deployment)

Total: 8-12 weeks for full implementation

## Immediate Next Steps
1. [ ] Design and implement Firestore schema
2. [ ] Set up Firebase Storage structure
3. [ ] Create basic document upload function
4. [ ] Build simple PDF viewer with signature overlay
5. [ ] Implement basic signature collection

---
Priority: HIGH - Start with Phase 1.1 Database Schema Design
